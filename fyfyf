#include <AntaresESP8266HTTP.h>
#include <Servo.h>
#include <ArduinoJson.h>
#include <LiquidCrystal_I2C.h>
#define ACCESSKEY "4398d61fc70bddcf:deccd923f2241613"
#define WIFISSID "SSID"
#define PASSWORD "coba123aja"
#define projectName "percobaan2"
#define deviceName "cobaaja"
StaticJsonBuffer<10000> jsonBuffer;
#define PBX 12
const int pinBuz = 14;
volatile bool state = false;
volatile long debounce_time = 0;
volatile long current_time = 0;
Servo servo;
byte x;
byte count = 0;
int lcdColumns = 16;
int lcdRows = 2;
LiquidCrystal_I2C lcd(0x3F, lcdColumns, lcdRows);  
AntaresESP8266HTTP antares(ACCESSKEY);

void setup() {
  waiting();
  pinMode(PBX, INPUT_PULLUP);
  pinMode(pinBuz, OUTPUT);
  servo.attach(2);
  Serial.begin(115200);
  antares.setDebug(true);
  antares.wifiConnectionNonSecure(WIFISSID, PASSWORD);
  attachInterrupt(digitalPinToInterrupt(PBX), intCallBack, RISING);
  //panggil();
}

void loop() {
  panggil();
  while(state == false)
  {
    Display();  
  }
  if ((x == 8) || (x == 13) || (x == 16) || (x == 17)) {
    if (state == true) {
      Serial.println("Program mobil terakhir oke...");
      rule();
      delay(1000);
      digitalWrite(pinBuz,1);//buzzer on 
      delay(300);
      //SERVO MEMBUKA BEBERAPA DETIK
      Serial.println("Portal Opened");
      servo.write(8);
      delay(3000);
      state = !state;
      //SERVO MENUTUP BEBERAPA DETIK
      Serial.println("Portal Closed");
      servo.write(90);
      digitalWrite(pinBuz,0);//buzzer on
      delay(100);
      panggil();
      Serial.println("Refresh complete..");
      count = 0;
      x = 18;
      Serial.println("x is 18");
      }
    else {}
   }  
  else {}
  if (state == true) {
    rule();
    delay(300);
    digitalWrite(pinBuz,1);//buzzer on
    delay(300);
    //SERVO MEMBUKA BEBERAPA DETIK
    Serial.println("Portal Opened");
    servo.write(8);
    //updatedata();
    delay(3000);
    //SERVO MENUTUP BEBERAPA DETIK
    Serial.println("Portal Closed");
    digitalWrite(pinBuz,0);//buzzer on
    delay(1000);
    servo.write(90);
    state = !state;
    panggil();
    count = 0;
  } 
  else if (count == 3) {
    while(state==false){
    panggil();
    digitalWrite(pinBuz,0);//buzzer on
    Serial.println("Refresh complete..");
    break;  
    }
    count = 0;
  }
  else {
    Serial.println("Wait for Button Pressed");
    count++;
    Serial.println("COUNT :" + String(count));
  }
}
void panggil() {
  Serial.print("\n");
  Serial.println("Data are shown below\n");
  //Pengambilan Data
  String antaresData = antares.retrieveLatestData(projectName,deviceName);
  if (antaresData != ""){
    antaresData.replace(" ","");
    antaresData.replace("\n","");
    antaresData.replace("\r","");
    antaresData.replace("\\\""," ");
    antaresData.replace("[","");
    antaresData.replace("]","");
    Serial.println(antaresData);
    JsonObject& root=jsonBuffer.parseObject(antaresData);
    JsonObject& root4=jsonBuffer.parseObject(root["m2m:cin"].as<String>());
    String con = root4["con"].as<String>();
    con.replace(" ", "\"");
    JsonObject& contentAntares = jsonBuffer.parseObject(con);
    x= contentAntares["nilaix"].as<byte>();
    Serial.println("nilaix : "+ (String)x);
    jsonBuffer.clear();
    antaresData = "";
   }
}
void intCallBack() {
  current_time = millis();
  if ((current_time - debounce_time) > 250) {
    Serial.println("Interrupt Button Pressed");
    state = !state;
    debounce_time = current_time;
    exit;
  } else {}
}
void rule() 
{
  lcd.clear();
  lcd.setCursor(0, 0);
  Serial.println("");
  switch (x) {
    case 18:
      Serial.println("Parkiran Penuh");
      lcd.print("MOHON MAAF");
      lcd.setCursor(4, 1);
      lcd.print("PARKIR PENUH");
      break;
    case 17:
      Serial.println("\tSilahkan Parkir di titik A");
      lcd.print("TEMPAT TERSEDIA :");
      lcd.setCursor(8, 1);
      lcd.print("A");
      break;
    case 16:
      Serial.println("\tSilahkan Parkir di titik B");
      lcd.print("TEMPAT TERSEDIA :");
      lcd.setCursor(8, 1);
      lcd.print("B");
      break;
    case 15:
      Serial.println("\tSilahkan Parkir di titik A");
      lcd.print("TEMPAT TERSEDIA :");
      lcd.setCursor(8, 1);
      lcd.print("AB");
      break;
    case 13:
      Serial.println("\tSilahkan Parkir di titik C");
      lcd.print("TEMPAT TERSEDIA :");
      lcd.setCursor(8, 1);
      lcd.print("C");
      break;
    case 12:
      Serial.println("\tSilahkan Parkir di titik A");
      lcd.print("TEMPAT TERSEDIA :");
      lcd.setCursor(8, 1);
      lcd.print("AC");
      break;
    case 11:
      Serial.println("\tSilahkan Parkir di titik B");
      break;
    case 10:
      Serial.println("\tSilahkan Parkir di titik A");
      break;
    case 8:
      Serial.println("\tSilahkan Parkir di titik D"); 
      break;
    case 7:
      Serial.println("\tSilahkan Parkir di titik A");
      break;
    case 6:
      Serial.println("\tSilahkan Parkir di titik B");
      break;
    case 5:
      Serial.println("\tSilahkan Parkir di titik A");
      break;
    case 3:
      Serial.println("\tSilahkan Parkir di titik C");
      break;
    case 2:
      Serial.println("\tSilahkan Parkir di titik A");
      break;
    case 1:
      Serial.println("\tSilahkan Parkir di titik B");
      break;
    case 0:
      Serial.println("\tSilahkan Parkir di titik A");
      break;
    default:
      Serial.println("\t\tFuckEror");
      lcd.print("EROR :");
      lcd.setCursor(8, 1);
      lcd.print("CUK");
      break;
  }
  Serial.println("");
  Serial.println("");
}
void Display() {
  lcd.begin();
  lcd.setCursor(7, 0);
  lcd.print("SELAMAT DATANG ....");
  lcd.setCursor(17, 1);
  lcd.print("SILAHKAN TEKAN TOMBOL X");
  for (byte i = 0; i < 26; i++) {
    lcd.scrollDisplayLeft();
    if(state==false){
    delay(250);  
    }else{break;}
  }
  lcd.clear();
}
void waiting() {
  lcd.begin();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("TUNGGU SEBENTAR");
  lcd.setCursor(0, 1);
  lcd.print("  SYSTEM REFRESH");
}
